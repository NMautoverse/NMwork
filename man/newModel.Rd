% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/newModel.R
\name{newModel}
\alias{newModel}
\title{Create new control stream based on an existing model}
\usage{
newModel(
  file.mod,
  newfile,
  update = TRUE,
  values,
  description = NULL,
  based.on,
  author = NULL,
  write.file = TRUE,
  overwrite = FALSE,
  modify = NULL
)
}
\arguments{
\item{file.mod}{The path to the control stream to use as the
starting point.}

\item{newfile}{The new control stream file path.}

\item{update}{Update initial values with final paremeter estimates
of `file.mod`.}

\item{values}{Specify specific initial values (passed to
NMwriteInits).}

\item{description}{A Pirana style description field before the
control stream code.}

\item{based.on}{A Pirana style field before the control stream
code.}

\item{author}{A Pirana style field before the control stream code.}

\item{write.file}{Write to newfile? Default is TRUE. See
`overwrite` too.}

\item{overwrite}{If newfile exists, overwrite it?}

\item{modify}{List of modification to do to control stream. Passed
to NMsim:::modifyModel().}
}
\description{
Create new control stream based on an existing model
}
\details{
Pirana fields are only applied if existing in `file.mod`.
}
\examples{
## Reference Base model is run11. You are trying two differnt new
## models run21 and run22. update=TRUE to use final parameter
## estimates as new inits.
newmod <- newModel(file.mod="run11.mod",newfile="run21.mod",update=TRUE)
## manual edits of run21.mod. Execute run21.mod
## NMexec(newmod)

# add run22 based on the code in run21 because we need most of the
# same edits, so file.mod=run21. But you are testing run22 against
# run11, so based.on="run11". Don't update the initial values
# based on run21. We want them to be identical to run21, so use
# update=FALSE.
newmod <- newmodel(file.mod="run21.mod",newfile="run22.mod",based.on="run11.mod",update=FALSE)
}
